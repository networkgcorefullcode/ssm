/*
SSM (Secure Storage Manager) API

API para gestión segura de claves criptográficas usando PKCS#11 y HSM.

API version: 1.0.0
Contact: support@yourorganization.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the UpdateKeyResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateKeyResponse{}

// UpdateKeyResponse struct for UpdateKeyResponse
type UpdateKeyResponse struct {
	// Mensaje de confirmación
	Message string `json:"message"`
	// Nuevo handle de la clave actualizada
	Handle uint `json:"handle"`
	// Etiqueta de la clave actualizada
	KeyLabel string `json:"key_label"`
	// Clave encriptada (opcional)
	CipherKey *string `json:"cipher_key,omitempty"`
}

type _UpdateKeyResponse UpdateKeyResponse

// NewUpdateKeyResponse instantiates a new UpdateKeyResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateKeyResponse(message string, handle uint, keyLabel string) *UpdateKeyResponse {
	this := UpdateKeyResponse{}
	this.Message = message
	this.Handle = handle
	this.KeyLabel = keyLabel
	return &this
}

// NewUpdateKeyResponseWithDefaults instantiates a new UpdateKeyResponse object
// This constructor will only assign default values to properties that have it defined,
// but not the ones where the parameter is required
func NewUpdateKeyResponseWithDefaults() *UpdateKeyResponse {
	this := UpdateKeyResponse{}
	return &this
}

// GetMessage returns the Message field value
func (o *UpdateKeyResponse) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *UpdateKeyResponse) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *UpdateKeyResponse) SetMessage(v string) {
	o.Message = v
}

// GetHandle returns the Handle field value
func (o *UpdateKeyResponse) GetHandle() uint {
	if o == nil {
		var ret uint
		return ret
	}

	return o.Handle
}

// GetHandleOk returns a tuple with the Handle field value
// and a boolean to check if the value has been set.
func (o *UpdateKeyResponse) GetHandleOk() (*uint, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Handle, true
}

// SetHandle sets field value
func (o *UpdateKeyResponse) SetHandle(v uint) {
	o.Handle = v
}

// GetKeyLabel returns the KeyLabel field value
func (o *UpdateKeyResponse) GetKeyLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KeyLabel
}

// GetKeyLabelOk returns a tuple with the KeyLabel field value
// and a boolean to check if the value has been set.
func (o *UpdateKeyResponse) GetKeyLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeyLabel, true
}

// SetKeyLabel sets field value
func (o *UpdateKeyResponse) SetKeyLabel(v string) {
	o.KeyLabel = v
}

// GetCipherKey returns the CipherKey field value if set, zero value otherwise.
func (o *UpdateKeyResponse) GetCipherKey() string {
	if o == nil || IsNil(o.CipherKey) {
		var ret string
		return ret
	}
	return *o.CipherKey
}

// GetCipherKeyOk returns a tuple with the CipherKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateKeyResponse) GetCipherKeyOk() (*string, bool) {
	if o == nil || IsNil(o.CipherKey) {
		return nil, false
	}
	return o.CipherKey, true
}

// HasCipherKey returns a boolean if a field has been set.
func (o *UpdateKeyResponse) HasCipherKey() bool {
	if o != nil && !IsNil(o.CipherKey) {
		return true
	}

	return false
}

// SetCipherKey gets a reference to the given string and assigns it to the CipherKey field.
func (o *UpdateKeyResponse) SetCipherKey(v string) {
	o.CipherKey = &v
}

func (o UpdateKeyResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateKeyResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["message"] = o.Message
	toSerialize["handle"] = o.Handle
	toSerialize["key_label"] = o.KeyLabel
	if !IsNil(o.CipherKey) {
		toSerialize["cipher_key"] = o.CipherKey
	}
	return toSerialize, nil
}

func (o *UpdateKeyResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"message",
		"handle",
		"key_label",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateKeyResponse := _UpdateKeyResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateKeyResponse)

	if err != nil {
		return err
	}

	*o = UpdateKeyResponse(varUpdateKeyResponse)

	return err
}

type NullableUpdateKeyResponse struct {
	value *UpdateKeyResponse
	isSet bool
}

func (v NullableUpdateKeyResponse) Get() *UpdateKeyResponse {
	return v.value
}

func (v *NullableUpdateKeyResponse) Set(val *UpdateKeyResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateKeyResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateKeyResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateKeyResponse(val *UpdateKeyResponse) *NullableUpdateKeyResponse {
	return &NullableUpdateKeyResponse{value: val, isSet: true}
}

func (v NullableUpdateKeyResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateKeyResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
