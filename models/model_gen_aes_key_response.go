/*
SSM (Secure Storage Manager) API

API para gestión segura de claves criptográficas usando PKCS#11 y HSM.  El SSM proporciona operaciones seguras de: - Generación de claves AES - Cifrado y descifrado de datos - Almacenamiento de claves - Gestión mediante HSM/SoftHSM  ## Autenticación La API funciona a través de Unix Domain Sockets para mayor seguridad. Tambien da soporte a HTTPS con certificados TLS. No implementado aun.  ## Formatos de datos - Todos los datos binarios (plaintext, ciphertext, IV) deben estar en Base64 - Las respuestas incluyen timestamps en formato RFC3339 - Los errores siguen el estándar RFC 7807 (Problem Details)

API version: 1.0.0
Contact: support@yourorganization.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the GenAESKeyResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GenAESKeyResponse{}

// GenAESKeyResponse struct for GenAESKeyResponse
type GenAESKeyResponse struct {
	// Handle de la clave en el HSM
	Handle *int32 `json:"handle,omitempty"`
	// Etiqueta de la clave generada
	Label *string `json:"label,omitempty"`
	// ID de la clave generada
	Id *string `json:"id,omitempty"`
	// Tamaño de la clave generada
	Bits *int `json:"bits,omitempty"`
}

// NewGenAESKeyResponse instantiates a new GenAESKeyResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGenAESKeyResponse() *GenAESKeyResponse {
	this := GenAESKeyResponse{}
	return &this
}

// NewGenAESKeyResponseWithDefaults instantiates a new GenAESKeyResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGenAESKeyResponseWithDefaults() *GenAESKeyResponse {
	this := GenAESKeyResponse{}
	return &this
}

// GetHandle returns the Handle field value if set, zero value otherwise.
func (o *GenAESKeyResponse) GetHandle() int32 {
	if o == nil || IsNil(o.Handle) {
		var ret int32
		return ret
	}
	return *o.Handle
}

// GetHandleOk returns a tuple with the Handle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenAESKeyResponse) GetHandleOk() (*int32, bool) {
	if o == nil || IsNil(o.Handle) {
		return nil, false
	}
	return o.Handle, true
}

// HasHandle returns a boolean if a field has been set.
func (o *GenAESKeyResponse) HasHandle() bool {
	if o != nil && !IsNil(o.Handle) {
		return true
	}

	return false
}

// SetHandle gets a reference to the given int32 and assigns it to the Handle field.
func (o *GenAESKeyResponse) SetHandle(v int32) {
	o.Handle = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *GenAESKeyResponse) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenAESKeyResponse) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *GenAESKeyResponse) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *GenAESKeyResponse) SetLabel(v string) {
	o.Label = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GenAESKeyResponse) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenAESKeyResponse) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GenAESKeyResponse) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *GenAESKeyResponse) SetId(v string) {
	o.Id = &v
}

// GetBits returns the Bits field value if set, zero value otherwise.
func (o *GenAESKeyResponse) GetBits() int {
	if o == nil || IsNil(o.Bits) {
		var ret int
		return ret
	}
	return *o.Bits
}

// GetBitsOk returns a tuple with the Bits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenAESKeyResponse) GetBitsOk() (*int, bool) {
	if o == nil || IsNil(o.Bits) {
		return nil, false
	}
	return o.Bits, true
}

// HasBits returns a boolean if a field has been set.
func (o *GenAESKeyResponse) HasBits() bool {
	if o != nil && !IsNil(o.Bits) {
		return true
	}

	return false
}

// SetBits gets a reference to the given int32 and assigns it to the Bits field.
func (o *GenAESKeyResponse) SetBits(v int) {
	o.Bits = &v
}

func (o GenAESKeyResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GenAESKeyResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Handle) {
		toSerialize["handle"] = o.Handle
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Bits) {
		toSerialize["bits"] = o.Bits
	}
	return toSerialize, nil
}

type NullableGenAESKeyResponse struct {
	value *GenAESKeyResponse
	isSet bool
}

func (v NullableGenAESKeyResponse) Get() *GenAESKeyResponse {
	return v.value
}

func (v *NullableGenAESKeyResponse) Set(val *GenAESKeyResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGenAESKeyResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGenAESKeyResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGenAESKeyResponse(val *GenAESKeyResponse) *NullableGenAESKeyResponse {
	return &NullableGenAESKeyResponse{value: val, isSet: true}
}

func (v NullableGenAESKeyResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGenAESKeyResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
