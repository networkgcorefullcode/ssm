/*
SSM (Secure Storage Manager) API

API para gestión segura de claves criptográficas usando PKCS#11 y HSM.  El SSM proporciona operaciones seguras de: - Generación de claves AES - Cifrado y descifrado de datos - Almacenamiento de claves - Gestión mediante HSM/SoftHSM  ## Autenticación La API funciona a través de Unix Domain Sockets para mayor seguridad. Tambien da soporte a HTTPS con certificados TLS. No implementado aun.  ## Formatos de datos - Todos los datos binarios (plaintext, ciphertext, IV) deben estar en Base64 - Las respuestas incluyen timestamps en formato RFC3339 - Los errores siguen el estándar RFC 7807 (Problem Details)

API version: 1.0.0
Contact: support@yourorganization.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the EncryptRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EncryptRequest{}

// EncryptRequest struct for EncryptRequest
type EncryptRequest struct {
	// Etiqueta de la clave para cifrar
	KeyLabel string `json:"key_label"`
	// Datos a cifrar codificados en Base64
	PlainB64 string `json:"plain_b64"`
}

type _EncryptRequest EncryptRequest

// NewEncryptRequest instantiates a new EncryptRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEncryptRequest(keyLabel string, plainB64 string) *EncryptRequest {
	this := EncryptRequest{}
	this.KeyLabel = keyLabel
	this.PlainB64 = plainB64
	return &this
}

// NewEncryptRequestWithDefaults instantiates a new EncryptRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEncryptRequestWithDefaults() *EncryptRequest {
	this := EncryptRequest{}
	return &this
}

// GetKeyLabel returns the KeyLabel field value
func (o *EncryptRequest) GetKeyLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KeyLabel
}

// GetKeyLabelOk returns a tuple with the KeyLabel field value
// and a boolean to check if the value has been set.
func (o *EncryptRequest) GetKeyLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeyLabel, true
}

// SetKeyLabel sets field value
func (o *EncryptRequest) SetKeyLabel(v string) {
	o.KeyLabel = v
}

// GetPlainB64 returns the PlainB64 field value
func (o *EncryptRequest) GetPlainB64() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PlainB64
}

// GetPlainB64Ok returns a tuple with the PlainB64 field value
// and a boolean to check if the value has been set.
func (o *EncryptRequest) GetPlainB64Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PlainB64, true
}

// SetPlainB64 sets field value
func (o *EncryptRequest) SetPlainB64(v string) {
	o.PlainB64 = v
}

func (o EncryptRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EncryptRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["key_label"] = o.KeyLabel
	toSerialize["plain_b64"] = o.PlainB64
	return toSerialize, nil
}

func (o *EncryptRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"key_label",
		"plain_b64",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEncryptRequest := _EncryptRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEncryptRequest)

	if err != nil {
		return err
	}

	*o = EncryptRequest(varEncryptRequest)

	return err
}

type NullableEncryptRequest struct {
	value *EncryptRequest
	isSet bool
}

func (v NullableEncryptRequest) Get() *EncryptRequest {
	return v.value
}

func (v *NullableEncryptRequest) Set(val *EncryptRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableEncryptRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableEncryptRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEncryptRequest(val *EncryptRequest) *NullableEncryptRequest {
	return &NullableEncryptRequest{value: val, isSet: true}
}

func (v NullableEncryptRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEncryptRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
