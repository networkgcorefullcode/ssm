/*
SSM (Secure Storage Manager) API

API para gestión segura de claves criptográficas usando PKCS#11 y HSM.  El SSM proporciona operaciones seguras de: - Generación de claves AES - Cifrado y descifrado de datos - Almacenamiento de claves - Gestión mediante HSM/SoftHSM  ## Autenticación La API funciona a través de Unix Domain Sockets para mayor seguridad. Tambien da soporte a HTTPS con certificados TLS. No implementado aun.  ## Formatos de datos - Todos los datos binarios (plaintext, ciphertext, IV) deben estar en Base64 - Las respuestas incluyen timestamps en formato RFC3339 - Los errores siguen el estándar RFC 7807 (Problem Details)

API version: 1.0.0
Contact: support@yourorganization.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// checks if the DecryptResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DecryptResponse{}

// DecryptResponse struct for DecryptResponse
type DecryptResponse struct {
	// Datos descifrados en Base64
	PlainB64 *string `json:"plain_b64,omitempty"`
}

// NewDecryptResponse instantiates a new DecryptResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDecryptResponse() *DecryptResponse {
	this := DecryptResponse{}
	return &this
}

// NewDecryptResponseWithDefaults instantiates a new DecryptResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDecryptResponseWithDefaults() *DecryptResponse {
	this := DecryptResponse{}
	return &this
}

// GetPlainB64 returns the PlainB64 field value if set, zero value otherwise.
func (o *DecryptResponse) GetPlainB64() string {
	if o == nil || IsNil(o.PlainB64) {
		var ret string
		return ret
	}
	return *o.PlainB64
}

// GetPlainB64Ok returns a tuple with the PlainB64 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DecryptResponse) GetPlainB64Ok() (*string, bool) {
	if o == nil || IsNil(o.PlainB64) {
		return nil, false
	}
	return o.PlainB64, true
}

// HasPlainB64 returns a boolean if a field has been set.
func (o *DecryptResponse) HasPlainB64() bool {
	if o != nil && !IsNil(o.PlainB64) {
		return true
	}

	return false
}

// SetPlainB64 gets a reference to the given string and assigns it to the PlainB64 field.
func (o *DecryptResponse) SetPlainB64(v string) {
	o.PlainB64 = &v
}

func (o DecryptResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DecryptResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PlainB64) {
		toSerialize["plain_b64"] = o.PlainB64
	}
	return toSerialize, nil
}

type NullableDecryptResponse struct {
	value *DecryptResponse
	isSet bool
}

func (v NullableDecryptResponse) Get() *DecryptResponse {
	return v.value
}

func (v *NullableDecryptResponse) Set(val *DecryptResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDecryptResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDecryptResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDecryptResponse(val *DecryptResponse) *NullableDecryptResponse {
	return &NullableDecryptResponse{value: val, isSet: true}
}

func (v NullableDecryptResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDecryptResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
