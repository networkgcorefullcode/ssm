/*
SSM (Secure Storage Manager) API

API para gestión segura de claves criptográficas usando PKCS#11 y HSM.  El SSM proporciona operaciones seguras de: - Generación de claves AES - Cifrado y descifrado de datos - Almacenamiento de claves - Gestión mediante HSM/SoftHSM  ## Autenticación La API funciona a través de Unix Domain Sockets para mayor seguridad. Tambien da soporte a HTTPS con certificados TLS. No implementado aun.  ## Formatos de datos - Todos los datos binarios (plaintext, ciphertext, IV) deben estar en Base64 - Las respuestas incluyen timestamps en formato RFC3339 - Los errores siguen el estándar RFC 7807 (Problem Details)

API version: 1.0.0
Contact: support@yourorganization.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the StoreKeyRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StoreKeyRequest{}

// StoreKeyRequest struct for StoreKeyRequest
type StoreKeyRequest struct {
	// Etiqueta para la clave almacenada
	KeyLabel string `json:"key_label"`
	// Identificador único
	Id string `json:"id"`
	// Valor de la clave en Base64
	KeyValue string `json:"key_value"`
	KeyType  string `json:"key_type"`
}

type _StoreKeyRequest StoreKeyRequest

// NewStoreKeyRequest instantiates a new StoreKeyRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStoreKeyRequest(keyLabel string, id string, keyValue string, keyType string) *StoreKeyRequest {
	this := StoreKeyRequest{}
	this.KeyLabel = keyLabel
	this.Id = id
	this.KeyType = keyType
	this.KeyValue = keyValue
	return &this
}

// NewStoreKeyRequestWithDefaults instantiates a new StoreKeyRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStoreKeyRequestWithDefaults() *StoreKeyRequest {
	this := StoreKeyRequest{}
	return &this
}

// GetKeyLabel returns the KeyLabel field value
func (o *StoreKeyRequest) GetKeyLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KeyLabel
}

// GetKeyLabelOk returns a tuple with the KeyLabel field value
// and a boolean to check if the value has been set.
func (o *StoreKeyRequest) GetKeyLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeyLabel, true
}

// SetKeyLabel sets field value
func (o *StoreKeyRequest) SetKeyLabel(v string) {
	o.KeyLabel = v
}

// GetId returns the Id field value
func (o *StoreKeyRequest) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *StoreKeyRequest) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *StoreKeyRequest) SetId(v string) {
	o.Id = v
}

// GetKeyValue returns the KeyValue field value
func (o *StoreKeyRequest) GetKeyValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KeyValue
}

// GetKeyValueOk returns a tuple with the KeyValue field value
// and a boolean to check if the value has been set.
func (o *StoreKeyRequest) GetKeyValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeyValue, true
}

// SetKeyValue sets field value
func (o *StoreKeyRequest) SetKeyValue(v string) {
	o.KeyValue = v
}

func (o StoreKeyRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StoreKeyRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["key_label"] = o.KeyLabel
	toSerialize["id"] = o.Id
	toSerialize["key_value"] = o.KeyValue
	return toSerialize, nil
}

func (o *StoreKeyRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"key_label",
		"id",
		"key_value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStoreKeyRequest := _StoreKeyRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStoreKeyRequest)

	if err != nil {
		return err
	}

	*o = StoreKeyRequest(varStoreKeyRequest)

	return err
}

type NullableStoreKeyRequest struct {
	value *StoreKeyRequest
	isSet bool
}

func (v NullableStoreKeyRequest) Get() *StoreKeyRequest {
	return v.value
}

func (v *NullableStoreKeyRequest) Set(val *StoreKeyRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableStoreKeyRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableStoreKeyRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStoreKeyRequest(val *StoreKeyRequest) *NullableStoreKeyRequest {
	return &NullableStoreKeyRequest{value: val, isSet: true}
}

func (v NullableStoreKeyRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStoreKeyRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
