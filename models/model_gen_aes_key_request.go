/*
SSM (Secure Storage Manager) API

API para gestión segura de claves criptográficas usando PKCS#11 y HSM.  El SSM proporciona operaciones seguras de: - Generación de claves AES - Cifrado y descifrado de datos - Almacenamiento de claves - Gestión mediante HSM/SoftHSM  ## Autenticación La API funciona a través de Unix Domain Sockets para mayor seguridad. Tambien da soporte a HTTPS con certificados TLS. No implementado aun.  ## Formatos de datos - Todos los datos binarios (plaintext, ciphertext, IV) deben estar en Base64 - Las respuestas incluyen timestamps en formato RFC3339 - Los errores siguen el estándar RFC 7807 (Problem Details)

API version: 1.0.0
Contact: support@yourorganization.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the GenAESKeyRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GenAESKeyRequest{}

// GenAESKeyRequest struct for GenAESKeyRequest
type GenAESKeyRequest struct {
	// Etiqueta única para identificar la clave
	Label string `json:"label"`
	// Identificador único de la clave
	Id string `json:"id"`
	// Tamaño de la clave en bits
	Bits int `json:"bits"`
}

type _GenAESKeyRequest GenAESKeyRequest

// NewGenAESKeyRequest instantiates a new GenAESKeyRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGenAESKeyRequest(label string, id string, bits int) *GenAESKeyRequest {
	this := GenAESKeyRequest{}
	this.Label = label
	this.Id = id
	this.Bits = bits
	return &this
}

// NewGenAESKeyRequestWithDefaults instantiates a new GenAESKeyRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGenAESKeyRequestWithDefaults() *GenAESKeyRequest {
	this := GenAESKeyRequest{}
	return &this
}

// GetLabel returns the Label field value
func (o *GenAESKeyRequest) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *GenAESKeyRequest) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *GenAESKeyRequest) SetLabel(v string) {
	o.Label = v
}

// GetId returns the Id field value
func (o *GenAESKeyRequest) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *GenAESKeyRequest) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *GenAESKeyRequest) SetId(v string) {
	o.Id = v
}

// GetBits returns the Bits field value
func (o *GenAESKeyRequest) GetBits() int {
	if o == nil {
		var ret int
		return ret
	}

	return o.Bits
}

// GetBitsOk returns a tuple with the Bits field value
// and a boolean to check if the value has been set.
func (o *GenAESKeyRequest) GetBitsOk() (*int, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Bits, true
}

// SetBits sets field value
func (o *GenAESKeyRequest) SetBits(v int) {
	o.Bits = v
}

func (o GenAESKeyRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GenAESKeyRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["label"] = o.Label
	toSerialize["id"] = o.Id
	toSerialize["bits"] = o.Bits
	return toSerialize, nil
}

func (o *GenAESKeyRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"label",
		"id",
		"bits",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGenAESKeyRequest := _GenAESKeyRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGenAESKeyRequest)

	if err != nil {
		return err
	}

	*o = GenAESKeyRequest(varGenAESKeyRequest)

	return err
}

type NullableGenAESKeyRequest struct {
	value *GenAESKeyRequest
	isSet bool
}

func (v NullableGenAESKeyRequest) Get() *GenAESKeyRequest {
	return v.value
}

func (v *NullableGenAESKeyRequest) Set(val *GenAESKeyRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableGenAESKeyRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableGenAESKeyRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGenAESKeyRequest(val *GenAESKeyRequest) *NullableGenAESKeyRequest {
	return &NullableGenAESKeyRequest{value: val, isSet: true}
}

func (v NullableGenAESKeyRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGenAESKeyRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
