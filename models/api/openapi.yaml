openapi: 3.0.3
info:
  contact:
    email: support@yourorganization.com
    name: SSM API Support
  description: |
    API for secure cryptographic key management using PKCS#11 and HSM.

    SSM provides secure operations for:
    - AES, DES, DES3 key generation
    - Data encryption and decryption
    - Key storage and management
    - HSM/SoftHSM integration

    ## Authentication
    The API works through Unix Domain Sockets for enhanced security.
    Also supports HTTPS with TLS certificates.

    ## Data Formats
    - All binary data (plaintext, ciphertext, IV) should be in Base64/Hex
    - Responses include timestamps in RFC3339 format
    - Errors follow RFC 7807 standard (Problem Details)
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  title: SSM (Secure Storage Manager) API
  version: 1.0.0
externalDocs:
  description: Additional SSM Documentation
  url: https://github.com/networkgcorefullcode/ssm/blob/main/README.md
servers:
- description: Local Unix Socket Server
  url: http://localhost
- description: Local HTTPS Server
  url: https://localhost:9001
tags:
- description: Cryptographic key management operations
  name: Key Management
- description: Encryption and decryption operations
  name: Encryption
- description: Health monitoring endpoints
  name: Health
paths:
  /generate-aes-key:
    post:
      description: |
        Generates a new symmetric AES key in the HSM with the specified size.
        The key is stored persistently and referenced by its label.
      operationId: generateAESKey
      requestBody:
        content:
          application/json:
            examples:
              aes256:
                summary: AES-256 Key
                value:
                  id: 1
                  bits: 256
              aes128:
                summary: AES-128 Key
                value:
                  id: 2
                  bits: 128
            schema:
              $ref: '#/components/schemas/GenAESKeyRequest'
        required: true
      responses:
        "201":
          content:
            application/json:
              examples:
                success:
                  summary: Successful response
                  value:
                    handle: 123456789
                    id: key001
                    bits: 256
              schema:
                $ref: '#/components/schemas/GenAESKeyResponse'
          description: Key generated successfully
        "400":
          content:
            application/json:
              examples:
                validation:
                  summary: Validation Error
                  value:
                    title: Validation Error
                    detail: Label is required
                    status: 400
                    error: validation_failed
                badJson:
                  summary: Invalid JSON
                  value:
                    title: Invalid JSON
                    detail: Failed to parse request body
                    status: 400
                    error: bad_json
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Invalid request
        "405":
          content:
            application/json:
              example:
                title: Method Not Allowed
                detail: Only POST method is allowed
                status: 405
                error: method_not_allowed
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: HTTP method not allowed
        "500":
          content:
            application/json:
              examples:
                hsm_error:
                  summary: HSM Error
                  value:
                    title: Key Generation Failed
                    detail: "Failed to generate AES key: pkcs11 session invalid"
                    status: 500
                    error: hsm_error
                general:
                  summary: General Error
                  value:
                    title: Internal Server Error
                    detail: An unexpected error occurred
                    status: 500
                    error: internal_error
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Internal server error
      summary: Generate new AES key
      tags:
      - Key Management
  /generate-des-key:
    post:
      description: |
        Generates a new DES key in the HSM.
        The key is stored persistently and referenced by its label.
      operationId: generateDESKey
      requestBody:
        content:
          application/json:
            examples:
              simple:
                summary: DES Key
                value:
                  id: des001
            schema:
              $ref: '#/components/schemas/GenDESKeyRequest'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenDESKeyResponse'
          description: DES key generated successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Invalid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Internal server error
      summary: Generate new DES key
      tags:
      - Key Management
  /generate-des3-key:
    post:
      description: |
        Generates a new DES3 key in the HSM.
        The key is stored persistently and referenced by its label.
      operationId: generateDES3Key
      requestBody:
        content:
          application/json:
            examples:
              simple:
                summary: DES3 Key
                value:
                  id: des3001
            schema:
              $ref: '#/components/schemas/GenDES3KeyRequest'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenDES3KeyResponse'
          description: DES3 key generated successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Invalid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Internal server error
      summary: Generate new DES3 key
      tags:
      - Key Management
  /encrypt:
    post:
      description: |
        Encrypts data using an AES, DES, or DES3 key stored in the HSM.
        Generates a unique random IV for each encryption operation.
      operationId: encryptData
      requestBody:
        content:
          application/json:
            examples:
              simple:
                summary: Simple encryption
                value:
                  key_label: MySecretKey
                  plain: 48656c6c6f20576f726c6421
                  encryption_algorithm: 1
            schema:
              $ref: '#/components/schemas/EncryptRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  summary: Successful encryption
                  value:
                    cipher: 123456789abecd1231231231514abcdef
                    iv: 123456789abecd
                    ok: true
                    time_created: 2024-10-03T10:15:30Z
                    time_updated: 2024-10-03T10:15:30Z
              schema:
                $ref: '#/components/schemas/EncryptResponse'
          description: Data encrypted successfully
        "400":
          content:
            application/json:
              examples:
                validation:
                  summary: Validation error
                  value:
                    title: Validation Error
                    detail: Label is required
                    status: 400
                    error: validation_failed
                badJson:
                  summary: Invalid JSON
                  value:
                    title: Invalid JSON
                    detail: Failed to parse request body
                    status: 400
                    error: bad_json
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Invalid request
        "404":
          content:
            application/json:
              example:
                title: Key Not Found
                detail: Key with label 'NonExistentKey' not found
                status: 404
                error: key_not_found
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Key not found
        "500":
          content:
            application/json:
              examples:
                hsm_error:
                  summary: HSM error
                  value:
                    title: Key Generation Failed
                    detail: "Failed to generate AES key: pkcs11 session invalid"
                    status: 500
                    error: hsm_error
                general:
                  summary: General error
                  value:
                    title: Internal Server Error
                    detail: An unexpected error occurred
                    status: 500
                    error: internal_error
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Internal server error
  summary: Encrypt data
      tags:
      - Encryption
  /decrypt:
    post:
      description: |
        Decrypts data using an AES key stored in the HSM.
        Requires the same IV used during encryption.
      operationId: decryptData
      requestBody:
        content:
          application/json:
            examples:
              simple:
                summary: Simple decryption
                value:
                  key_label: MySecretKey
                  cipher: YWJjZGVmZ2hpams...
                  iv: MTIzNDU2Nzg5MEFCQ0RFRg==
                  encryption_algorithm: 1
                  id: 2345
            schema:
              $ref: '#/components/schemas/DecryptRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  summary: Successful decryption
                  value:
                    plain: SGVsbG8gV29ybGQh
              schema:
                $ref: '#/components/schemas/DecryptResponse'
          description: Data decrypted successfully
        "400":
          content:
            application/json:
              examples:
                validation:
                  summary: Validation error
                  value:
                    title: Validation Error
                    detail: Label is required
                    status: 400
                    error: validation_failed
                badJson:
                  summary: Invalid JSON
                  value:
                    title: Invalid JSON
                    detail: Failed to parse request body
                    status: 400
                    error: bad_json
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Invalid request
        "404":
          content:
            application/json:
              example:
                title: Key Not Found
                detail: Key with label 'NonExistentKey' not found
                status: 404
                error: key_not_found
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Key not found
        "500":
          content:
            application/json:
              examples:
                hsm_error:
                  summary: HSM error
                  value:
                    title: Key Generation Failed
                    detail: "Failed to generate AES key: pkcs11 session invalid"
                    status: 500
                    error: hsm_error
                general:
                  summary: General error
                  value:
                    title: Internal Server Error
                    detail: An unexpected error occurred
                    status: 500
                    error: internal_error
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Internal server error
  summary: Decrypt data
      tags:
      - Encryption
  /store-key:
    post:
      description: |
        Stores an existing cryptographic key in the HSM.
        The key must be provided in the appropriate format.
      operationId: storeKey
      requestBody:
        content:
          application/json:
            examples:
              simple:
                summary: Store key
                value:
                  key_label: ImportedKey
                  id: imported001
                  key_value: YmFzZTY0X2VuY29kZWRfa2V5
                  key_type: AES
            schema:
              $ref: '#/components/schemas/StoreKeyRequest'
        required: true
      responses:
        "201":
          content:
            application/json:
              examples:
                success:
                  summary: Key stored
                  value:
                    handle: 987654321
                    cipher_key: encrypted_key_value
              schema:
                $ref: '#/components/schemas/StoreKeyResponse'
          description: Key stored successfully
        "400":
          content:
            application/json:
              examples:
                validation:
                  summary: Validation error
                  value:
                    title: Validation Error
                    detail: Label is required
                    status: 400
                    error: validation_failed
                badJson:
                  summary: Invalid JSON
                  value:
                    title: Invalid JSON
                    detail: Failed to parse request body
                    status: 400
                    error: bad_json
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Invalid request
        "500":
          content:
            application/json:
              examples:
                hsm_error:
                  summary: HSM error
                  value:
                    title: Key Generation Failed
                    detail: "Failed to generate AES key: pkcs11 session invalid"
                    status: 500
                    error: hsm_error
                general:
                  summary: General error
                  value:
                    title: Internal Server Error
                    detail: An unexpected error occurred
                    status: 500
                    error: internal_error
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Internal server error
      summary: Store existing key
      tags:
      - Key Management
    delete:
      description: |
        Deletes a cryptographic key from the HSM.
        The key is identified by its label and optional ID.
      operationId: deleteKey
      requestBody:
        content:
          application/json:
            examples:
              simple:
                summary: Delete key
                value:
                  key_label: ImportedKey
                  id: imported001
            schema:
              $ref: '#/components/schemas/DeleteKeyRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteKeyResponse'
          description: Key deleted successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Invalid request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Key not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Internal server error
      summary: Delete key
      tags:
      - Key Management
    put:
      description: |
        Updates an existing cryptographic key in the HSM.
        Replaces the key value with a new one while keeping the same label and ID.
      operationId: updateKey
      requestBody:
        content:
          application/json:
            examples:
              simple:
                summary: Update key
                value:
                  key_label: ImportedKey
                  id: imported001
                  key_value: bmV3X2tleV92YWx1ZQ==
                  key_type: AES
            schema:
              $ref: '#/components/schemas/UpdateKeyRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateKeyResponse'
          description: Key updated successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Invalid request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Key not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Internal server error
      summary: Update key
      tags:
      - Key Management

# ######################################################################
#  ____   ___  __  __ ____   ___  _   _ _____ _   _ _____ ____  
# / ___| / _ \|  \/  |  _ \ / _ \| \ | | ____| \ | |_   _/ ___| 
#| |    | | | | |\/| | |_) | | | |  \| |  _| |  \| | | | \___ \ 
#| |___ | |_| | |  | |  __/| |_| | |\  | |___| |\  | | |  ___) |
# \____| \___/|_|  |_|_|    \___/|_| \_|_____|_| \_| |_| |____/ 
#                                                                
# ######################################################################

components:
  examples:
    Base64Examples:
      description: |
        Examples of common data encoded in Base64:
        - "Hello World!" → "SGVsbG8gV29ybGQh"
        - "Secret Message" → "U2VjcmV0IE1lc3NhZ2U="
        - "Test data 123" → "VGVzdCBkYXRhIDEyMw=="
      summary: Base64 data examples
    HexadecimalExamples:
      description: |
        Examples of common data encoded in hexadecimal:
        - "Hello World!" → "48656c6c6f20576f726c6421"
        - "Secret Message" → "536563726574204d657373616765"
        - "Test data 123" → "54657374206461746120313233"
      summary: Hexadecimal data examples
  responses:
    BadRequest:
      content:
        application/json:
          examples:
            validation:
              summary: Validation error
              value:
                title: Validation Error
                detail: Label is required
                status: 400
                error: validation_failed
            badJson:
              summary: Invalid JSON
              value:
                title: Invalid JSON
                detail: Failed to parse request body
                status: 400
                error: bad_json
          schema:
            $ref: '#/components/schemas/ProblemDetails'
      description: Solicitud inválida
    KeyNotFound:
      content:
        application/json:
          example:
            title: Key Not Found
            detail: Key with label 'NonExistentKey' not found
            status: 404
            error: key_not_found
          schema:
            $ref: '#/components/schemas/ProblemDetails'
      description: Clave no encontrada
    MethodNotAllowed:
      content:
        application/json:
          example:
            title: Method Not Allowed
            detail: Only POST method is allowed
            status: 405
            error: method_not_allowed
          schema:
            $ref: '#/components/schemas/ProblemDetails'
      description: Método HTTP no permitido
    InternalServerError:
      content:
        application/json:
          examples:
            hsm_error:
              summary: HSM error
              value:
                title: Key Generation Failed
                detail: "Failed to generate AES key: pkcs11 session invalid"
                status: 500
                error: hsm_error
            general:
              summary: General error
              value:
                title: Internal Server Error
                detail: An unexpected error occurred
                status: 500
                error: internal_error
          schema:
            $ref: '#/components/schemas/ProblemDetails'
      description: Internal server error
    ServiceUnavailable:
      content:
        application/json:
          example:
            title: Service Unavailable
            detail: HSM connection lost
            status: 503
            error: service_unavailable
          schema:
            $ref: '#/components/schemas/ProblemDetails'
      description: Servicio no disponible

  # =============================================================
  #  ____   ____ _   _ _____ ___  ___  _   _  ____  
  # / ___| / ___| | | | ____/ _ \|_ _| \ | |/ ___| 
  # \___ \| |   | | | |  _|| | | || ||  \| | |  _  
  #  ___) | |___| |_| | |__| |_| || || |\  | |_| | 
  # |____/ \____|\___/|_____\___/|___|_| \_|\____| 
  #
  # ===================== SCHEMAS ==============================
  
  schemas:
    GenAESKeyRequest:
      example:
        id: key001
        bits: 256
      properties:
        # label:
        #   description: Etiqueta única para identificar la clave
        #   example: MySecretKey
        #   maxLength: 256
        #   minLength: 1
        id:
          description: Unique key identifier
          example: key001
          maxLength: 64
          minLength: 1
          type: string
        bits:
          description: Key size in bits
          enum:
            - 128
            - 192
            - 256
          example: 256
          type: integer
      required:
      - bits
      - id
      type: object
    GenAESKeyResponse:
      example:
        bits: 256
        handle: 123456789
        id: key001
      properties:
        handle:
          description: HSM key handle
          example: 123456789
          format: uint
          type: integer
        id:
          description: Generated key identifier
          example: key001
          type: string
        bits:
          description: Size of the generated key in bits
          example: 256
          type: integer
      type: object
    EncryptRequest:
      example:
        key_label: MySecretKey
        plain: 48656c6c6f20576f726c6421
      properties:
        key_label:
          description: Label of the key to encrypt
          example: MySecretKey
          minLength: 1
          type: string
        plain:
          description: Data to encrypt encoded in hexadecimal
          example: 48656c6c6f20576f726c6421
          format: byte
          type: string
        encryption_algorithm:
          description: Encryption algorithm to use (1: AES, 2: AES, 3: DES, 4: DES3)
          example: 1
          enum:
            - 1
            - 2
            - 3
            - 4
          type: integer
      required:
      - key_label
      - plain
      - encryption_algorithm
      type: object
    EncryptResponse:
      example:
        cipher: 48656c6c6f20576f726c6421
        iv: c6f205
        ok: true
        time_created: 2024-10-03T10:15:30Z
        time_updated: 2024-10-03T10:15:30Z
      properties:
        cipher:
          description: Encrypted data in hexadecimal
          example: 48656c6c6f20576f726c6421
          format: byte
          type: string
        iv:
          description: Initialization vector in hexadecimal
          example: 56c6c6f2
          format: byte
          type: string
        ok:
          description: Indicates if the operation was successful
          example: true
          type: boolean
        time_created:
          description: Creation timestamp in RFC3339
          example: 2024-10-03T10:15:30Z
          format: date-time
          type: string
        time_updated:
          description: Update timestamp in RFC3339
          example: 2024-10-03T10:15:30Z
          format: date-time
          type: string
      type: object
    DecryptRequest:
      example:
        key_label: MySecretKey
        cipher: YWJjZGVmZ2hpams...
        iv: MTIzNDU2Nzg5MEFCQ0RFRg==
        encryption_algorithm: 1
        id: 2345
      properties:
        key_label:
          description: Label of the key to decrypt
          example: MySecretKey
          minLength: 1
          type: string
        cipher:
          description: Encrypted data in Base64
          example: 656c6c6f20576f726c6421
          format: byte
          type: string
        iv:
          description: Initialization vector in Base64 (same used for encryption)
          example: 6f20576f
          format: byte
          type: string
        id:
          description: Optional ID for tracking
          example: 12345
          type: integer
        encryption_algorithm:
          description: Encryption algorithm to use (1: AES, 2: AES, 3: DES, 4: DES3)
          example: 1
          enum:
            - 1
            - 2
            - 3
            - 4
          type: integer
      required:
      - cipher
      - iv
      - key_label
      - encryption_algorithm
      - id
      type: object
    DecryptResponse:
      example:
        plain: 123afabe213be2
      properties:
        plain:
          description: Decrypted data in Base64
          example: 123afabe213be2
          format: byte
          type: string
      type: object
    StoreKeyRequest:
      example:
        key_label: ImportedKey
        id: imported001
        key_value: abcde1231312
        key_type: AES
      properties:
        key_label:
          description: Label for the stored key
          example: ImportedKey
          minLength: 1
          type: string
        id:
          description: Unique identifier
          example: imported001
          minLength: 1
          type: string
        key_value:
          description: Key value in Base64
          example: abcde1231312
          format: byte
          type: string
        key_type:
          description: Type of cryptographic key
          example: AES
          enum:
            - AES
            - DES
            - DES3
          type: string
      required:
      - id
      - key_label
      - key_value
      - key_type
      type: object
    StoreKeyResponse:
      example:
        handle: 987654321
        cipher_key: encrypted_key_value
      properties:
        handle:
          description: Handle of the stored key
          example: 987654321
          format: uint
          type: integer
        cipher_key:
          description: Stored encrypted key
          example: encrypted_key_value
          type: string
      type: object
    ProblemDetails:
      description: Detalles de error según RFC 7807
      example:
        instance: /generate-aes-key
        detail: Label is required
        title: Validation Error
        error: validation_failed
        status: 400
      properties:
        title:
          description: Short title of the problem
          example: Validation Error
          type: string
        detail:
          description: Detailed description of the problem
          example: Label is required
          type: string
        status:
          description: HTTP status code
          example: 400
          type: integer
        error:
          description: Internal error code
          example: validation_failed
          type: string
        instance:
          description: URI identifying the specific occurrence
          example: /generate-aes-key
          format: uri
          type: string
      type: object
    GenDESKeyRequest:
      example:
        id: des001
      properties:
        id:
          description: Unique key identifier
          example: des001
          maxLength: 64
          minLength: 1
          type: string
      required:
      - id
      type: object
    GenDESKeyResponse:
      example:
        handle: 123456789
        id: des001
      properties:
        handle:
          description: HSM key handle
          example: 123456789
          type: integer
        id:
          description: Key identifier
          example: des001
          type: string
      type: object
    GenDES3KeyRequest:
      example:
        id: des3001
      properties:
        id:
          description: Unique key identifier
          example: des3001
          maxLength: 64
          minLength: 1
          type: string
      required:
      - id
      type: object
    GenDES3KeyResponse:
      example:
        handle: 123456789
        id: des3001
      properties:
        handle:
          description: HSM key handle
          example: 123456789
          type: integer
        id:
          description: Key identifier
          example: des3001
          type: string
      type: object
    DeleteKeyRequest:
      example:
        key_label: ImportedKey
        id: imported001
      properties:
        key_label:
          description: Label of the key to delete
          example: ImportedKey
          maxLength: 256
          minLength: 1
          type: string
        id:
          description: Key identifier (optional)
          example: imported001
          maxLength: 64
          type: string
      required:
      - key_label
      - id
      type: object
    DeleteKeyResponse:
      example:
        message: Key deleted successfully
        key_label: ImportedKey
      properties:
        message:
          description: Confirmation message
          example: Key deleted successfully
          type: string
        key_label:
          description: Label of the deleted key
          example: ImportedKey
          type: string
      required:
      - message
      - key_label
      type: object
    UpdateKeyRequest:
      example:
        key_label: ImportedKey
        id: imported001
        key_value: 1213afabe213be2
        key_type: AES
      properties:
        key_label:
          description: Label of the key to update
          example: ImportedKey
          maxLength: 256
          minLength: 1
          type: string
        id:
          description: Key identifier
          example: imported001
          maxLength: 64
          minLength: 1
          type: string
        key_value:
          description: New key value in hexadecimal format
          example: bmV3X2tleV92YWx1ZQ==
          type: string
        key_type:
          description: Type of cryptographic key
          enum:
          - AES
          - DES
          - DES3
          example: AES
          type: string
      required:
      - key_label
      - id
      - key_value
      - key_type
      type: object
    UpdateKeyResponse:
      example:
        message: Key updated successfully
        handle: 987654321
        key_label: ImportedKey
        cipher_key: encrypted_key_value
      properties:
        message:
          description: Confirmation message
          example: Key updated successfully
          type: string
        handle:
          description: New HSM key handle
          example: 987654321
          type: integer
        key_label:
          description: Label of the updated key
          example: ImportedKey
          type: string
        cipher_key:
          description: Encrypted key value (optional)
          example: encrypted_key_value
          type: string
      required:
      - message
      - handle
      - key_label
      type: object
