/*
SSM (Secure Storage Manager) API

API para gestión segura de claves criptográficas usando PKCS#11 y HSM.  El SSM proporciona operaciones seguras de: - Generación de claves AES - Cifrado y descifrado de datos - Almacenamiento de claves - Gestión mediante HSM/SoftHSM  ## Autenticación La API funciona a través de Unix Domain Sockets para mayor seguridad. Tambien da soporte a HTTPS con certificados TLS. No implementado aun.  ## Formatos de datos - Todos los datos binarios (plaintext, ciphertext, IV) deben estar en Base64 - Las respuestas incluyen timestamps en formato RFC3339 - Los errores siguen el estándar RFC 7807 (Problem Details)

API version: 1.0.0
Contact: support@yourorganization.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the DecryptRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DecryptRequest{}

// DecryptRequest struct for DecryptRequest
type DecryptRequest struct {
	// Etiqueta de la clave para descifrar
	KeyLabel string `json:"key_label"`
	// Datos cifrados en Base64
	CipherB64 string `json:"cipher_b64"`
	// Vector de inicialización en Base64 (mismo usado para cifrar)
	IvB64 string `json:"iv_b64,omitempty"`
	// ID opcional para tracking
	Id *int32 `json:"id,omitempty"`
	// Details for the encryption algoritme
	EncryptionAlgoritme int `json:"encryption_algoritme"`
}

type _DecryptRequest DecryptRequest

// NewDecryptRequest instantiates a new DecryptRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDecryptRequest(keyLabel string, cipherB64 string, ivB64 string) *DecryptRequest {
	this := DecryptRequest{}
	this.KeyLabel = keyLabel
	this.CipherB64 = cipherB64
	this.IvB64 = ivB64
	return &this
}

// NewDecryptRequestWithDefaults instantiates a new DecryptRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDecryptRequestWithDefaults() *DecryptRequest {
	this := DecryptRequest{}
	return &this
}

// GetKeyLabel returns the KeyLabel field value
func (o *DecryptRequest) GetKeyLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KeyLabel
}

// GetKeyLabelOk returns a tuple with the KeyLabel field value
// and a boolean to check if the value has been set.
func (o *DecryptRequest) GetKeyLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeyLabel, true
}

// SetKeyLabel sets field value
func (o *DecryptRequest) SetKeyLabel(v string) {
	o.KeyLabel = v
}

// GetCipherB64 returns the CipherB64 field value
func (o *DecryptRequest) GetCipherB64() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CipherB64
}

// GetCipherB64Ok returns a tuple with the CipherB64 field value
// and a boolean to check if the value has been set.
func (o *DecryptRequest) GetCipherB64Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CipherB64, true
}

// SetCipherB64 sets field value
func (o *DecryptRequest) SetCipherB64(v string) {
	o.CipherB64 = v
}

// GetIvB64 returns the IvB64 field value
func (o *DecryptRequest) GetIvB64() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IvB64
}

// GetIvB64Ok returns a tuple with the IvB64 field value
// and a boolean to check if the value has been set.
func (o *DecryptRequest) GetIvB64Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IvB64, true
}

// SetIvB64 sets field value
func (o *DecryptRequest) SetIvB64(v string) {
	o.IvB64 = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DecryptRequest) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DecryptRequest) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DecryptRequest) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *DecryptRequest) SetId(v int32) {
	o.Id = &v
}

func (o DecryptRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DecryptRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["key_label"] = o.KeyLabel
	toSerialize["cipher_b64"] = o.CipherB64
	toSerialize["iv_b64"] = o.IvB64
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	return toSerialize, nil
}

func (o *DecryptRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"key_label",
		"cipher_b64",
		"iv_b64",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDecryptRequest := _DecryptRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDecryptRequest)

	if err != nil {
		return err
	}

	*o = DecryptRequest(varDecryptRequest)

	return err
}

type NullableDecryptRequest struct {
	value *DecryptRequest
	isSet bool
}

func (v NullableDecryptRequest) Get() *DecryptRequest {
	return v.value
}

func (v *NullableDecryptRequest) Set(val *DecryptRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDecryptRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDecryptRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDecryptRequest(val *DecryptRequest) *NullableDecryptRequest {
	return &NullableDecryptRequest{value: val, isSet: true}
}

func (v NullableDecryptRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDecryptRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
