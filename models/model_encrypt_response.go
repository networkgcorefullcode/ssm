/*
SSM (Secure Storage Manager) API

API para gestión segura de claves criptográficas usando PKCS#11 y HSM.  El SSM proporciona operaciones seguras de: - Generación de claves AES - Cifrado y descifrado de datos - Almacenamiento de claves - Gestión mediante HSM/SoftHSM  ## Autenticación La API funciona a través de Unix Domain Sockets para mayor seguridad. Tambien da soporte a HTTPS con certificados TLS. No implementado aun.  ## Formatos de datos - Todos los datos binarios (plaintext, ciphertext, IV) deben estar en Base64 - Las respuestas incluyen timestamps en formato RFC3339 - Los errores siguen el estándar RFC 7807 (Problem Details)

API version: 1.0.0
Contact: support@yourorganization.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"time"
)

// checks if the EncryptResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EncryptResponse{}

// EncryptResponse struct for EncryptResponse
type EncryptResponse struct {
	// Datos cifrados en Base64
	CipherB64 *string `json:"cipher_b64,omitempty"`
	// Vector de inicialización en Base64
	IvB64 *string `json:"iv_b64,omitempty"`
	// Indica si la operación fue exitosa
	Ok *bool `json:"ok,omitempty"`
	// Timestamp de creación en RFC3339
	TimeCreated *time.Time `json:"time_created,omitempty"`
	// Timestamp de actualización en RFC3339
	TimeUpdated *time.Time `json:"time_updated,omitempty"`
}

// NewEncryptResponse instantiates a new EncryptResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEncryptResponse() *EncryptResponse {
	this := EncryptResponse{}
	return &this
}

// NewEncryptResponseWithDefaults instantiates a new EncryptResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEncryptResponseWithDefaults() *EncryptResponse {
	this := EncryptResponse{}
	return &this
}

// GetCipherB64 returns the CipherB64 field value if set, zero value otherwise.
func (o *EncryptResponse) GetCipherB64() string {
	if o == nil || IsNil(o.CipherB64) {
		var ret string
		return ret
	}
	return *o.CipherB64
}

// GetCipherB64Ok returns a tuple with the CipherB64 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EncryptResponse) GetCipherB64Ok() (*string, bool) {
	if o == nil || IsNil(o.CipherB64) {
		return nil, false
	}
	return o.CipherB64, true
}

// HasCipherB64 returns a boolean if a field has been set.
func (o *EncryptResponse) HasCipherB64() bool {
	if o != nil && !IsNil(o.CipherB64) {
		return true
	}

	return false
}

// SetCipherB64 gets a reference to the given string and assigns it to the CipherB64 field.
func (o *EncryptResponse) SetCipherB64(v string) {
	o.CipherB64 = &v
}

// GetIvB64 returns the IvB64 field value if set, zero value otherwise.
func (o *EncryptResponse) GetIvB64() string {
	if o == nil || IsNil(o.IvB64) {
		var ret string
		return ret
	}
	return *o.IvB64
}

// GetIvB64Ok returns a tuple with the IvB64 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EncryptResponse) GetIvB64Ok() (*string, bool) {
	if o == nil || IsNil(o.IvB64) {
		return nil, false
	}
	return o.IvB64, true
}

// HasIvB64 returns a boolean if a field has been set.
func (o *EncryptResponse) HasIvB64() bool {
	if o != nil && !IsNil(o.IvB64) {
		return true
	}

	return false
}

// SetIvB64 gets a reference to the given string and assigns it to the IvB64 field.
func (o *EncryptResponse) SetIvB64(v string) {
	o.IvB64 = &v
}

// GetOk returns the Ok field value if set, zero value otherwise.
func (o *EncryptResponse) GetOk() bool {
	if o == nil || IsNil(o.Ok) {
		var ret bool
		return ret
	}
	return *o.Ok
}

// GetOkOk returns a tuple with the Ok field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EncryptResponse) GetOkOk() (*bool, bool) {
	if o == nil || IsNil(o.Ok) {
		return nil, false
	}
	return o.Ok, true
}

// HasOk returns a boolean if a field has been set.
func (o *EncryptResponse) HasOk() bool {
	if o != nil && !IsNil(o.Ok) {
		return true
	}

	return false
}

// SetOk gets a reference to the given bool and assigns it to the Ok field.
func (o *EncryptResponse) SetOk(v bool) {
	o.Ok = &v
}

// GetTimeCreated returns the TimeCreated field value if set, zero value otherwise.
func (o *EncryptResponse) GetTimeCreated() time.Time {
	if o == nil || IsNil(o.TimeCreated) {
		var ret time.Time
		return ret
	}
	return *o.TimeCreated
}

// GetTimeCreatedOk returns a tuple with the TimeCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EncryptResponse) GetTimeCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.TimeCreated) {
		return nil, false
	}
	return o.TimeCreated, true
}

// HasTimeCreated returns a boolean if a field has been set.
func (o *EncryptResponse) HasTimeCreated() bool {
	if o != nil && !IsNil(o.TimeCreated) {
		return true
	}

	return false
}

// SetTimeCreated gets a reference to the given time.Time and assigns it to the TimeCreated field.
func (o *EncryptResponse) SetTimeCreated(v time.Time) {
	o.TimeCreated = &v
}

// GetTimeUpdated returns the TimeUpdated field value if set, zero value otherwise.
func (o *EncryptResponse) GetTimeUpdated() time.Time {
	if o == nil || IsNil(o.TimeUpdated) {
		var ret time.Time
		return ret
	}
	return *o.TimeUpdated
}

// GetTimeUpdatedOk returns a tuple with the TimeUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EncryptResponse) GetTimeUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.TimeUpdated) {
		return nil, false
	}
	return o.TimeUpdated, true
}

// HasTimeUpdated returns a boolean if a field has been set.
func (o *EncryptResponse) HasTimeUpdated() bool {
	if o != nil && !IsNil(o.TimeUpdated) {
		return true
	}

	return false
}

// SetTimeUpdated gets a reference to the given time.Time and assigns it to the TimeUpdated field.
func (o *EncryptResponse) SetTimeUpdated(v time.Time) {
	o.TimeUpdated = &v
}

func (o EncryptResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EncryptResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CipherB64) {
		toSerialize["cipher_b64"] = o.CipherB64
	}
	if !IsNil(o.IvB64) {
		toSerialize["iv_b64"] = o.IvB64
	}
	if !IsNil(o.Ok) {
		toSerialize["ok"] = o.Ok
	}
	if !IsNil(o.TimeCreated) {
		toSerialize["time_created"] = o.TimeCreated
	}
	if !IsNil(o.TimeUpdated) {
		toSerialize["time_updated"] = o.TimeUpdated
	}
	return toSerialize, nil
}

type NullableEncryptResponse struct {
	value *EncryptResponse
	isSet bool
}

func (v NullableEncryptResponse) Get() *EncryptResponse {
	return v.value
}

func (v *NullableEncryptResponse) Set(val *EncryptResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableEncryptResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableEncryptResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEncryptResponse(val *EncryptResponse) *NullableEncryptResponse {
	return &NullableEncryptResponse{value: val, isSet: true}
}

func (v NullableEncryptResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEncryptResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
