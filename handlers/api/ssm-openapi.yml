openapi: 3.0.3
info:
  contact:
    email: support@yourorganization.com
    name: SSM API Support
  description: |
    API for secure cryptographic key management using PKCS#11 and HSM.

    SSM provides secure operations for:
    - AES, DES, DES3 key generation
    - Data encryption and decryption
    - Key storage and management
    - HSM/SoftHSM integration

    ## Authentication
    The API supports JWT Bearer tokens and API keys for authentication.
    Obtain a JWT token using the `/login` endpoint.

    ## Data Formats
    - All binary data (plaintext, ciphertext, IV) should be in Base64/Hex
    - Responses include timestamps in RFC3339 format
    - Errors follow RFC 7807 standard (Problem Details)
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  title: SSM (Secure Storage Manager) API
  version: 1.0.0
externalDocs:
  description: Additional SSM Documentation
  url: https://github.com/networkgcorefullcode/ssm/blob/main/README.md
servers:
- description: Local Unix Socket Server
  url: http://localhost
- description: Local HTTPS Server
  url: https://localhost:9001
tags:
- description: Authentication operations
  name: Authentication
- description: Cryptographic key management operations
  name: Key Management
- description: Encryption and decryption operations
  name: Encryption
- description: Health monitoring endpoints
  name: Health

security:
  - bearerAuth: []
  - apiKeyAuth: []

paths:
  /login:
    post:
      description: |
        Authenticate user and obtain JWT access token for API access.
      operationId: userLogin
      tags:
      - Authentication
      security: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
          description: Login successful
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
          description: Invalid credentials
        "400":
          $ref: '#/components/responses/BadRequest'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: User authentication

  /crypto/generate-aes-key:
    post:
      description: |
        Generates a new symmetric AES key in the HSM with the specified size.
        The key is stored persistently and referenced by its label.
      operationId: generateAESKey
      requestBody:
        content:
          application/json:
            examples:
              aes256:
                summary: AES-256 Key
                value:
                  id: 1
                  bits: 256
              aes128:
                summary: AES-128 Key
                value:
                  id: 2
                  bits: 128
            schema:
              $ref: '#/components/schemas/GenAESKeyRequest'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenAESKeyResponse'
          description: Key generated successfully
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "405":
          $ref: '#/components/responses/MethodNotAllowed'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Generate new AES key
      tags:
      - Key Management

  /crypto/generate-des-key:
    post:
      description: |
        Generates a new DES key in the HSM.
        The key is stored persistently and referenced by its label.
      operationId: generateDESKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenDESKeyRequest'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenDESKeyResponse'
          description: DES key generated successfully
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Generate new DES key
      tags:
      - Key Management

  /crypto/generate-des3-key:
    post:
      description: |
        Generates a new DES3 key in the HSM.
        The key is stored persistently and referenced by its label.
      operationId: generateDES3Key
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenDES3KeyRequest'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenDES3KeyResponse'
          description: DES3 key generated successfully
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Generate new DES3 key
      tags:
      - Key Management

  /crypto/encrypt:
    post:
      description: |
        Encrypts data using an AES, DES, or DES3 key stored in the HSM.
        Generates a unique random IV for each encryption operation.
      operationId: encryptData
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EncryptRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptResponse'
          description: Data encrypted successfully
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/KeyNotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Encrypt data
      tags:
      - Encryption

  /crypto/decrypt:
    post:
      description: |
        Decrypts data using an AES key stored in the HSM.
        Requires the same IV used during encryption.
      operationId: decryptData
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DecryptRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DecryptResponse'
          description: Data decrypted successfully
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/KeyNotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Decrypt data
      tags:
      - Encryption

  /crypto/store-key:
    post:
      description: |
        Stores an existing cryptographic key in the HSM.
        The key must be provided in the appropriate format.
      operationId: storeKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreKeyRequest'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreKeyResponse'
          description: Key stored successfully
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Store existing key
      tags:
      - Key Management
    put:
      description: |
        Updates an existing cryptographic key in the HSM.
        Replaces the key value with a new one while keeping the same label and ID.
      operationId: updateKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateKeyRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateKeyResponse'
          description: Key updated successfully
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/KeyNotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Update key
      tags:
      - Key Management
    delete:
      description: |
        Deletes a cryptographic key from the HSM.
        The key is identified by its label and optional ID.
      operationId: deleteKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteKeyRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteKeyResponse'
          description: Key deleted successfully
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/KeyNotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Delete key
      tags:
      - Key Management

  /crypto/get-data-key:
    post:
      description: |
        Retrieves information about a single key from the HSM by its label and ID.
        Returns the key handle, ID, and size in bits.
      operationId: getKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetKeyRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetKeyResponse'
          description: Key information retrieved successfully
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "404":
          $ref: '#/components/responses/KeyNotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Get single key information
      tags:
      - Key Management

  /crypto/get-data-keys:
    post:
      description: |
        Retrieves information about all keys from the HSM that match the specified label.
        Returns an array of key information including handle, ID, and size.
      operationId: getDataKeys
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetDataKeysRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDataKeysResponse'
          description: Keys retrieved successfully
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Get multiple keys by label
      tags:
      - Key Management

  /crypto/get-all-keys:
    post:
      description: |
        Retrieves information about all keys stored in the HSM.
        Returns keys grouped by label with their handles, IDs, and sizes.
      operationId: getAllKeys
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllKeysResponse'
          description: All keys retrieved successfully
        "401":
          $ref: '#/components/responses/Unauthorized'
        "500":
          $ref: '#/components/responses/InternalServerError'
      summary: Get all keys from HSM
      tags:
      - Key Management

  /crypto/health-check:
    post:
      description: |
        Health Check info to send periodical request to the SSM
        if don't get a response the SSM is down
      operationId: healthCheckPost
      security: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckResponse'
          description: Service is healthy
      summary: Health check endpoint
      tags:
      - Health

components:
  securitySchemes:
    $ref: 'components/security/auth.yml'
  
  schemas:
    # Request schemas
    GenAESKeyRequest:
      $ref: 'components/schemas/requests/GenAESKeyRequest.yml'
    GenDESKeyRequest:
      $ref: 'components/schemas/requests/GenDESKeyRequest.yml'
    GenDES3KeyRequest:
      $ref: 'components/schemas/requests/GenDES3KeyRequest.yml'
    EncryptRequest:
      $ref: 'components/schemas/requests/EncryptRequest.yml'
    DecryptRequest:
      $ref: 'components/schemas/requests/DecryptRequest.yml'
    StoreKeyRequest:
      $ref: 'components/schemas/requests/StoreKeyRequest.yml'
    UpdateKeyRequest:
      $ref: 'components/schemas/requests/UpdateKeyRequest.yml'
    DeleteKeyRequest:
      $ref: 'components/schemas/requests/DeleteKeyRequest.yml'
    GetKeyRequest:
      $ref: 'components/schemas/requests/GetKeyRequest.yml'
    GetDataKeysRequest:
      $ref: 'components/schemas/requests/GetDataKeysRequest.yml'
    LoginRequest:
      $ref: 'components/schemas/requests/LoginRequest.yml'
    
    # Response schemas
    GenAESKeyResponse:
      $ref: 'components/schemas/responses/GenAESKeyResponse.yml'
    GenDESKeyResponse:
      $ref: 'components/schemas/responses/GenDESKeyResponse.yml'
    GenDES3KeyResponse:
      $ref: 'components/schemas/responses/GenDES3KeyResponse.yml'
    EncryptResponse:
      $ref: 'components/schemas/responses/EncryptResponse.yml'
    DecryptResponse:
      $ref: 'components/schemas/responses/DecryptResponse.yml'
    StoreKeyResponse:
      $ref: 'components/schemas/responses/StoreKeyResponse.yml'
    UpdateKeyResponse:
      $ref: 'components/schemas/responses/UpdateKeyResponse.yml'
    DeleteKeyResponse:
      $ref: 'components/schemas/responses/DeleteKeyResponse.yml'
    GetKeyResponse:
      $ref: 'components/schemas/responses/GetKeyResponse.yml'
    GetDataKeysResponse:
      $ref: 'components/schemas/responses/GetDataKeysResponse.yml'
    GetAllKeysResponse:
      $ref: 'components/schemas/responses/GetAllKeysResponse.yml'
    HealthCheckResponse:
      $ref: 'components/schemas/responses/HealthCheckResponse.yml'
    LoginResponse:
      $ref: 'components/schemas/responses/LoginResponse.yml'
    
    # Common schemas
    ProblemDetails:
      $ref: 'components/schemas/common/ProblemDetails.yml'
    DataKeyInfo:
      $ref: 'components/schemas/common/DataKeyInfo.yml'

  responses:
    BadRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
      description: Invalid request
    Unauthorized:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
      description: Authentication required
    KeyNotFound:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
      description: Key not found
    MethodNotAllowed:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
      description: HTTP method not allowed
    InternalServerError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
      description: Internal server error
